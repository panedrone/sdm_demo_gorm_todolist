package dbal

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

import "sdm_demo_gorm_todolist/models"

type GroupsDao struct {
	ds DataStore
}

// (C)RUD: groups
// Generated values are passed to DTO/model.

func (dao *GroupsDao) Create(p *models.Group) (err error) {
	err = dao.ds.Create(p)
	return
}

// C(R)UD: groups

func (dao *GroupsDao) ReadAll() (res []*models.Group, err error) {
	err = dao.ds.Read(res)
	return
}

// C(R)UD: groups

func (dao *GroupsDao) Read(gId int64) (res *models.Group, err error) {
	res = &models.Group{}
	err = dao.ds.Read(res, gId)
	return
}

// CR(U)D: groups
// Returns the number of affected rows or -1 on error.

func (dao *GroupsDao) Update(p *models.Group) (res int64, err error) {
	res, err = dao.ds.Update(p)
	return
}

// CRU(D): groups
// Returns the number of affected rows or -1 on error.

func (dao *GroupsDao) Delete(gId int64) (res int64, err error) {
	p := &models.Group{
		GId: gId,
	}
	res, err = dao.ds.Delete(p)
	return
}

func (dao *GroupsDao) GetAllGroupsEx() (res []*models.GroupEx, err error) {
	sql := `select g.*,  
		(select count(*) from tasks where g_id=g.g_id) as tasks_count 
		from groups g`
	errMap := make(map[string]int)
	onDto := func(row map[string]interface{}) {
		obj := models.GroupEx{}
		fromRow(&obj.GId, row, "g_id", errMap)
		fromRow(&obj.GName, row, "g_name", errMap)
		fromRow(&obj.TasksCount, row, "tasks_count", errMap)
		res = append(res, &obj)
	}
	err = dao.ds.QueryAllRows(sql, onDto)
	if err == nil {
		err = errMapToErr(errMap)
	}
	return
}

func (dao *GroupsDao) GetGroupEx(gId string) (res *models.GroupEx, err error) {
	sql := `select g.*,  
		(select count(*) from tasks where g_id=g.g_id) as tasks_count 
		from groups g 
		where g_id=?`
	row, err := dao.ds.QueryRow(sql, gId)
	if err != nil {
		return
	}
	res = &models.GroupEx{}
	errMap := make(map[string]int)
	fromRow(&res.GId, row, "g_id", errMap)
	fromRow(&res.GName, row, "g_name", errMap)
	fromRow(&res.TasksCount, row, "tasks_count", errMap)
	err = errMapToErr(errMap)
	return
}
