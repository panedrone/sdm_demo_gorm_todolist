package dal

// This code was generated by a tool. Don't modify it manually.
// http://sqldalmaker.sourceforge.net

type TasksDao struct {
	Ds *DataStore
}

func (dao *TasksDao) GetGroupTasks(gId int64) (res []*Task, err error) {
	sql := `--- TODO dont fetch comments 
		select * from tasks where g_id =? 
		order by t_id`
	errMap := make(map[string]int)
	onDto := func(row map[string]interface{}) {
		obj := Task{}
		fromRow(&obj.TId, row, "t_id", errMap)
		fromRow(&obj.GId, row, "g_id", errMap)
		fromRow(&obj.TPriority, row, "t_priority", errMap)
		fromRow(&obj.TDate, row, "t_date", errMap)
		fromRow(&obj.TSubject, row, "t_subject", errMap)
		fromRow(&obj.TComments, row, "t_comments", errMap)
		res = append(res, &obj)
	}
	err = dao.Ds.QueryAllRows(sql, onDto, gId)
	if err == nil {
		err = errMapToErr(errMap)
	}
	return
}

// Returns the number of affected rows or -1 on error.

func (dao *TasksDao) DeleteGroupTasks(gId string) (res int64, err error) {
	sql := `delete from tasks where g_id=?`
	errMap := make(map[string]int)
	res, err = dao.Ds.Exec(sql, gId)
	if err == nil {
		err = errMapToErr(errMap)
	}
	return
}

func (dao *TasksDao) GetCount() (res int64, err error) {
	sql := `select count(*) from tasks`
	r, err := dao.Ds.Query(sql)
	if err == nil {
		err = assign(&res, r)
	}
	return
}
